package com.digi.connector.config;

import java.io.BufferedWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import com.digi.connector.config.ConfigGenerator.FileType;

public class FileNone extends FileGenerator {

    private static FileType fileType = FileType.NONE;
    
	public FileNone(String directoryPath) throws IOException {
		
		super(directoryPath,fileType);	

	}
    public void writeHeaderComment(BufferedWriter bufferWriter) throws IOException {
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        Date date = new Date();

        String note_string = "/*\n * This is an auto-generated file - DO NOT EDIT! \n";
        
   
        note_string += String.format(" * This is generated by %s tool \n", TOOL_NAME);

        
        note_string += String.format(" * This file was generated on: %s \n", dateFormat.format(date))
                     + String.format(" * The command line arguments were: %s\n", ConfigGenerator.getArgumentLogString())
                     + String.format(" * The version of %s tool was: %s */\n\n", TOOL_NAME, ConfigGenerator.VERSION);
        
        bufferWriter.write(note_string);
        
    }
    public void generateFile(ConfigData configData) throws Exception {
        try {

            String defineName = generatedFile.replace('.', '_').toLowerCase();
                       
            fileWriter.write(String.format("#ifndef %s\n#define %s\n\n", defineName, defineName));
            fileWriter.write(CONNECTOR_GLOBAL_HEADER);
            fileWriter.write(CONNECTOR_CONST_PROTECTION);

            writeDefinesAndStructures(configData);
            
            /* Write all group enum in H file */
            writeRciErrorEnumHeader(configData);
            writeGlobalErrorEnumHeader(configData, fileWriter);

           
            writeGroupTypeAndErrorEnum(configData,fileWriter);

           /* writeRciErrorEnumHeader(configData);                
            writeGlobalErrorEnumHeader(configData,fileWriter);*/
            
            /*
             * Start writing:
             * 1. all #define for all strings from user's groups 
             * 2. all #define for all RCI and user's global errors 
             * 3. all strings in connector_remote_all_strings[]
             */
            fileWriter.write(String.format("\n\n#if defined %s\n", RCI_PARSER_DATA));
            fileWriter.write("#define CONNECTOR_BINARY_RCI_SERVICE \n\n");
            
            fileWriter.write(String.format("#define FIRMWARE_TARGET_ZERO_VERSION  0x%X\n\n",ConfigGenerator.getFirmware()));

            /* Write Define Errors Macros */
            writeDefineRciErrors(configData);
            
            writeDefineGroupErrors(configData);

            writeDefineGlobalErrors(configData);
            
            /* write remote all strings in source file */
            writeRemoteAllStrings(configData);
            
            /* write connector_rci_errors[] */
            writeGlobalErrorStructures(configData);

            /* write structures in source file */
            writeAllStructures(configData);
            
            fileWriter.write(String.format("\n#endif\n\n"));
            fileWriter.write(CONNECTOR_CONST_PROTECTION_RESTORE);
            fileWriter.write(String.format("\n#endif\n"));
                       
            ConfigGenerator.log(String.format("Files created:\n\t%s%s",  filePath, generatedFile));
            if (generatedFile.length() > 0) ConfigGenerator.log(String.format("\t%s%s", filePath, headerFile));


        } catch (IOException e) {
            throw new IOException(e.getMessage());
        }

        finally {
            fileWriter.close();
            if (headerWriter != null) headerWriter.close();
        }

    }

  
}
